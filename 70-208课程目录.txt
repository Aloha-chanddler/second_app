70：请求权限列表数据
71：将获取到的权限列表数据渲染为table表格
72：用户--角色--权限三者之间的关系介绍
73：实现角色列表路由的切换
74：角色列表的基础布局，并获取角色列表的数据
75：渲染角色列表中的table数据
76：重复功能自主完成
77：角色下权限数据的渲染思路
78：实现角色下权限数据的渲染
79：一级权限美化
80：二级权限渲染
81：三级权限渲染及美化样式
82：角色权限列表优化
83：删除权限下指定角色的权限
84：完成删除权限的业务逻辑
85：分配权限功能
86：分配权限树形控件
87：优化树形控件
88：将角色身上已有的权限默认加载到树形结构上
89：实现已有权限的默认勾选功能  
90：解决角色权限对话框关闭的时候重置角色id数组bug
91：具体分配权限的功能
92：完善用户管理里面分配角色功能。。。
93：将获取的角色列表渲染成一个下拉菜单
94：分配角色功能
95：把代码提交到仓库中
96：进入分类管理系统开发
97：创建商品分类管理的子分支
98：商品分类路由组件的加载
99：绘制商品分类页面的基本结构
100：获取商品分类的数据列表
101：将商品分类数据渲染为树形表格，由于elementui中没有提供类似的ui组件，
	所以需要借助第三方插件库，以实现卡片视图里的table表格，
	第三方插件库的名称vue-table-with-tree-grid
102：通过自定义模板列的形式把后“是否有效”这一列的数据渲染出来
103：渲染“排序”和“操作”这两列
104：分页区域功能实现
105：添加分类功能实现
106：获取父级分类的数据列表
107：渲染父级分类所对应的级联选择器
108：处理添加分类的表单数据
109：监听添加分类对话框的关闭事件
110：完成具体的商品分类添加操作
111：提交代码到仓库
112：开始分类参数的编写
113：参数管理概述，功能的介绍
114：分类参数路由组件开发
115：分类参数页面绘制
116：获取商品分类的列表数据
117：渲染商品分类的级联选择框
118：控制级联选择器的选择范围
119：渲染动态参数和静态属性的tabs页签
120：渲染添加参数的按钮和添加属性的按钮，同时控制其启用和禁用的状态
121：获取参数数据
122：解决页面面板切换时也需要向服务器发起请求的问题
123：判断获取到的数据属于动态参数还是静态参数
124：渲染动态参数和静态属性的table表格
125：完成添加参数和添加属性的功能
126：完成参数的添加操作
127：完成编辑参数功能
128：继续完善编辑的功能，根据id查询参数数据，点击确定按钮发起修改请求
129：删除参数的操作
130：渲染参数下的可选项
131：判断attr_vals是否为空，如果为空则返回空数组
132：使用element ui中的动态编辑标签控制attr_vals展示的添加按钮与输入文本框的切换显示
133：解决多行输入框联动的问题
134：使用$nextTick()函数解决文本框自动获取焦点以及失去焦点时的操作
135：实现按钮与文本框的切换显示
136：完成参数项的添加操作，持久化储存数据
137：删除参数项的操作
138：处理选择商品分类中不是选中三级分类情况下的问题
139：复制动态参数的展开行到静态参数的展开行粘贴一份，功能一模一样
140：提交代码到远程仓库
141：商品列表功能开发开始
142：路由加载商品列表页面
143：获取商品列表数据
144：渲染商品列表的table表格
145：创建全局的时间过滤器处理商品创建时间的格式
146：实现商品列表底部的分页功能
147：实现搜索与清空的功能
148：完成删除商品的功能
149：点击添加商品跳转到添加商品界面的路由跳转
150：绘制添加页面的基本结构
151：美化步骤条
152：绘制添加商品的tab栏区域
153：实现步骤条与tab栏的联动效果，让el-steps 与el-tabs公用同一个数据项
154：分析页面的添加行为，注意el-form与el-tabs的嵌套关系，el-form里面嵌套el-tabs，el-tabs里面嵌套el-tab-pane
155：绘制基本信息面板里的表单项
156：获取商品的分类数据
157：根据获取到的分类数据在页面渲染出级联选择器
158：控制级联选择器的选择范围（只允许选中三级商品分类，不允许选中一级或二级的商品分类）
159：阻止标签页的切换
160：获取商品参数面板对应的数据
161：渲染商品参数面板的表单item项
162：美化复选框
163：开发商品属性面板对应的功能
164：通过循环的形式将获取到的商品静态属性列表渲染为表单item项
165：图片上传功能
166：演示上传组件能否正常生效
167：处理图片上传成功之后的操作，需把图片相关信息存储到添加表单中
168：实现图片的移除操作  **
169：实现图片的预览效果
170：在商品内容的面板中渲染出一个富文本编辑器
171：实现商品内容的添加，在此之前要先对整个表单进行数据校验
172：发起数据请求之前先对表单数据goods_cat做处理，使用lodash做深拷贝
173：处理attrs参数
174：发起添加商品的请求
175：提交代码到远程仓库
176：订单管理开发开始
177：通过路由形式将订单页面加载出来
178：获取订单列表的数据
179：渲染订单的列表数据
180：订单列表底部的分页功能
181：点击操作按钮弹出对话框，实现里面的省市信息联动效果  
182：实现物流进度的查询
183：将物流进度以时间轴的形式展现到物流进度对话框面板中
184：将完成的代码推送到远程仓库
185：数据统计功能开始
186：初始化数据报表页面显示
187：基于Echarts在页面上绘制图形区
188：获取报表数据并将数据替换到echarts图形中进行展示
189：将数据报表的代码提交到远程仓库
190：将项目优化部署上线
191：项目优化策略 1、生成优化报告 2、第三方库启用CDN 3、element ui 组件按需加载 4、路由懒加载 5、首页内容定制
192：为项目添加进度条
193：处理运行serve期间终端报错的几个问题
194：运行build命令，处理所出现的问题 bable-plugins-transform-remove-console
195：如何在项目发布阶段移除console代码
196：生成项目报告 vue-cli-service build --report
197：通过 vue.config.js修改webpack的配置
198：为开发模式与发布模式指定不同的打包入口
199：通过chainWebpack自定义打包入口
200：通过externals加载外部CDN资源，从而让打包出来的项目体积更小
201：演示打包效果
202：通过CDN优化elementUi的打包
203：实现首页内容定制
204：实现路由懒加载
205：项目上线，通过node创建web服务器
206：为服务器开启gzip网络传输压缩
207：配置https的服务，实际开发中一般由后台人员处理此过程
208：使用pm2管理应用